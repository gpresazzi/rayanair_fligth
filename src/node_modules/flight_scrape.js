"use strict";

const puppeteer = require('puppeteer');
const Flight = require("flight");

async function getinnerTextBySelector(puppetterPage, selector){
    const allPrices = await puppetterPage.evaluate((selector) => {
      let prices = Array();
      var list = document.querySelectorAll(selector);
      list.forEach(element => {
        prices.push(element.innerText);
      });
      return prices;
    }, selector);
    
    return allPrices;
}
  
/**
 * Parse single flight object, according to the selectors
 * @param {*} puppetterPage 
 */
async function getFlightItemList(puppetterPage){
  var flightObjects = [];

  const flightsArray = await puppetterPage.evaluate(() => {
      var flightArray = [];
      let selectorTripItem = "div.flight-header";
      selectedItems = document.querySelectorAll(selectorTripItem);
      
      var direction = -1;
      var previousDep = "";
      var previousDest = "";

      [...selectedItems].map(element => {
        var flightItem = {};
        
        var departureSelector = "span.cities__departure";
        var destinationSelector = "span.cities__destination";
        var startTimeSelector = "div.start-time";
        var arrivalTimeSelector = "div.end-time";
        var priceSelector = "span.flights-table-price__price";

        flightItem.departure = element.querySelector(departureSelector) != null ? element.querySelector(departureSelector).innerText: "";
        flightItem.destination = element.querySelector(destinationSelector) != null ? element.querySelector(destinationSelector).innerText: "";
        flightItem.startTime = element.querySelector(startTimeSelector)!= null ? element.querySelector(startTimeSelector).innerText: "";
        flightItem.arrivalTime = element.querySelector(arrivalTimeSelector) != null ? element.querySelector(arrivalTimeSelector).innerText: "";
        flightItem.price = element.querySelector(priceSelector + "--discount") != null ? element.querySelector(priceSelector + "--discount").innerText: "";
        flightItem.discounted = true;

        if (flightItem.price == "")
        {
          flightItem.price = element.querySelector(priceSelector) != null ? element.querySelector(priceSelector).innerText: "";
          flightItem.discounted = false;
        }

        if (previousDep != flightItem.departure || previousDest != flightItem.destination) 
        {
          previousDep = flightItem.departure;
          previousDest = flightItem.destination;
          direction ++;
        }
        flightItem.direction = direction;
        
        flightArray.push(flightItem);
      });
      return flightArray;
  });

  flightsArray.forEach(element => {
    var flightObj = new Flight();
    flightObj.startTime = element.startTime;
    flightObj.arrivalTime = element.arrivalTime;
    flightObj.price = element.price;
    flightObj.departure = element.departure;
    flightObj.destination = element.destination;
    flightObj.discounted = element.discounted;
    flightObj.direction = element.direction;
    
    flightObjects.push(flightObj);
  });
  return flightObjects;
}
  
module.exports = class Scrape
{
  async scrape(from, to, startDate, endDate)
  {
    let url = "https://www.ryanair.com/it/en/booking/home/" + from + "/" + to + "/" + startDate + "/" + endDate + "/1/0/0/0";

    const browser = await puppeteer.launch({args: ['--no-sandbox', '--disable-setuid-sandbox'], ignoreHTTPSErrors: true, dumpio: false });
    const page = await browser.newPage();
    console.log(new Date() + " " + url);
    await page.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });
    console.log(new Date() + " Download complete, waiting some seconds more ...");

    await page.waitFor(3*1000); 
    //await page.screenshot({path: '/home/screenshot.png'});

    var list = await getFlightItemList(page);
    await browser.close();
    return {
      url: url,
      results: list
    };
  };
};
  